{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab 8: Implement Your Machine Learning Project Plan"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this lab assignment, you will implement the machine learning project plan you created in the written assignment. You will:\n",
    "\n",
    "1. Load your data set and save it to a Pandas DataFrame.\n",
    "2. Perform exploratory data analysis on your data to determine which feature engineering and data preparation techniques you will use.\n",
    "3. Prepare your data for your model and create features and a label.\n",
    "4. Fit your model to the training data and evaluate your model.\n",
    "5. Improve your model by performing model selection and/or feature selection techniques to find best model for your problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Packages\n",
    "\n",
    "Before you get started, import a few packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Task:</b> In the code cell below, import additional packages that you have used in this course that you will need for this task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1: Load the Data Set\n",
    "\n",
    "\n",
    "You have chosen to work with one of four data sets. The data sets are located in a folder named \"data.\" The file names of the three data sets are as follows:\n",
    "\n",
    "* The \"adult\" data set that contains Census information from 1994 is located in file `adultData.csv`\n",
    "* The airbnb NYC \"listings\" data set is located in file  `airbnbListingsData.csv`\n",
    "* The World Happiness Report (WHR) data set is located in file `WHR2018Chapter2OnlineData.csv`\n",
    "* The book review data set is located in file `bookReviewsData.csv`\n",
    "\n",
    "\n",
    "\n",
    "<b>Task:</b> In the code cell below, use the same method you have been using to load your data using `pd.read_csv()` and save it to DataFrame `df`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review</th>\n",
       "      <th>Positive Review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>This was perhaps the best of Johannes Steinhof...</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>This very fascinating book is a story written ...</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>The four tales in this collection are beautifu...</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The book contained more profanity than I expec...</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>We have now entered a second time of deep conc...</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              Review  Positive Review\n",
       "0  This was perhaps the best of Johannes Steinhof...             True\n",
       "1  This very fascinating book is a story written ...             True\n",
       "2  The four tales in this collection are beautifu...             True\n",
       "3  The book contained more profanity than I expec...            False\n",
       "4  We have now entered a second time of deep conc...             True"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "bookReviewDataSet_filename =os.path.join(os.getcwd(), \"data\", \"bookReviewsData.csv\")\n",
    "\n",
    "filename = bookReviewDataSet_filename\n",
    "df = pd.read_csv(filename)\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: Exploratory Data Analysis\n",
    "\n",
    "The next step is to inspect and analyze your data set with your machine learning problem and project plan in mind. \n",
    "\n",
    "This step will help you determine data preparation and feature engineering techniques you will need to apply to your data to build a balanced modeling data set for your problem and model. These data preparation techniques may include:\n",
    "* addressing missingness, such as replacing missing values with means\n",
    "* renaming features and labels\n",
    "* finding and replacing outliers\n",
    "* performing winsorization if needed\n",
    "* performing one-hot encoding on categorical features\n",
    "* performing vectorization for an NLP problem\n",
    "* addressing class imbalance in your data sample to promote fair AI\n",
    "\n",
    "\n",
    "Think of the different techniques you have used to inspect and analyze your data in this course. These include using Pandas to apply data filters, using the Pandas `describe()` method to get insight into key statistics for each column, using the Pandas `dtypes` property to inspect the data type of each column, and using Matplotlib and Seaborn to detect outliers and visualize relationships between features and labels. If you are working on a classification problem, use techniques you have learned to determine if there is class imbalance.\n",
    "\n",
    "\n",
    "<b>Task</b>: Use the techniques you have learned in this course to inspect and analyze your data. \n",
    "\n",
    "<b>Note</b>: You can add code cells if needed by going to the <b>Insert</b> menu and clicking on <b>Insert Cell Below</b> in the drop-drown menu."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of the DataFrame: (1973, 2)\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1973 entries, 0 to 1972\n",
      "Data columns (total 2 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   Review           1973 non-null   object\n",
      " 1   Positive Review  1973 non-null   bool  \n",
      "dtypes: bool(1), object(1)\n",
      "memory usage: 17.5+ KB\n",
      "None\n",
      "Missing Values:\n",
      " Review             0\n",
      "Positive Review    0\n",
      "dtype: int64\n",
      "Class Distribution:\n",
      " False    993\n",
      "True     980\n",
      "Name: Positive Review, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    10  100   11   12   20   30   50   ability      able  about  ...  wrote  \\\n",
      "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.000000  0.000000    0.0  ...    0.0   \n",
      "1  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.000000  0.077033    0.0  ...    0.0   \n",
      "2  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.000000  0.000000    0.0  ...    0.0   \n",
      "3  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.000000  0.000000    0.0  ...    0.0   \n",
      "4  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.060604  0.108731    0.0  ...    0.0   \n",
      "\n",
      "   year     years  yes       yet  york       you     young      your  yourself  \n",
      "0   0.0  0.000000  0.0  0.280795   0.0  0.000000  0.000000  0.000000       0.0  \n",
      "1   0.0  0.059176  0.0  0.000000   0.0  0.203094  0.071971  0.102101       0.0  \n",
      "2   0.0  0.000000  0.0  0.000000   0.0  0.000000  0.000000  0.000000       0.0  \n",
      "3   0.0  0.000000  0.0  0.000000   0.0  0.000000  0.000000  0.000000       0.0  \n",
      "4   0.0  0.000000  0.0  0.000000   0.0  0.023889  0.000000  0.000000       0.0  \n",
      "\n",
      "[5 rows x 1000 columns]\n"
     ]
    }
   ],
   "source": [
    "#Displaying basic information about the dataset\n",
    "print(\"Shape of the DataFrame:\",df.shape)\n",
    "print(df.info())\n",
    "\n",
    "#Checking for missing values\n",
    "missing_values= df.isnull().sum()\n",
    "print(\"Missing Values:\\n\",missing_values)\n",
    "\n",
    "#---------------\n",
    "\n",
    "#Calculateing class distribution\n",
    "class_distribution = df['Positive Review'].value_counts()\n",
    "print(\"Class Distribution:\\n\", class_distribution)\n",
    "# VisualizING class distribution\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.countplot(data=df, x='Positive Review')\n",
    "plt.title(\"Class Distribution\")\n",
    "plt.show()\n",
    "\n",
    "#---------------\n",
    "\n",
    "# HISTOGRAM VISUALIZATION\n",
    "# Calculating the length of each review\n",
    "df['review_length'] = df['Review'].apply(len)\n",
    "# Visualizing the distribution of review lengths\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.histplot(data=df, x='review_length', bins=20)\n",
    "plt.title(\"Distribution of Review Lengths\")\n",
    "plt.xlabel(\"Review Length\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.show()\n",
    "\n",
    "# Data splitting (train-test split)\n",
    "X_train, X_test, y_train, y_test = train_test_split(df['Review'], df['Positive Review'], test_size=0.2, random_state=42)\n",
    "\n",
    "# Creating a TF-IDF vectorizer\n",
    "vectorizer=TfidfVectorizer(max_features=1000)\n",
    "\n",
    "#Vectorizing the \"review\" column for training data\n",
    "X_train_tfidf = vectorizer.fit_transform(X_train)\n",
    "X_train_tfidf_df = pd.DataFrame(X_train_tfidf.toarray(), columns=vectorizer.get_feature_names())\n",
    "\n",
    "# Vectorizing the \"review\" column for testing data\n",
    "X_test_tfidf = vectorizer.transform(X_test)\n",
    "X_test_tfidf_df = pd.DataFrame(X_test_tfidf.toarray(), columns=vectorizer.get_feature_names())\n",
    "\n",
    "print(X_tfidf_df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Implement Your Project Plan\n",
    "\n",
    "<b>Task:</b> Use the rest of this notebook to carry out your project plan. You will:\n",
    "\n",
    "1. Prepare your data for your model and create features and a label.\n",
    "2. Fit your model to the training data and evaluate your model.\n",
    "3. Improve your model by performing model selection and/or feature selection techniques to find best model for your problem.\n",
    "\n",
    "\n",
    "Add code cells below and populate the notebook with commentary, code, analyses, results, and figures as you see fit."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MODEL FITTING USING LOGISTIC REGRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "       False       0.80      0.79      0.80       195\n",
      "        True       0.80      0.81      0.80       200\n",
      "\n",
      "    accuracy                           0.80       395\n",
      "   macro avg       0.80      0.80      0.80       395\n",
      "weighted avg       0.80      0.80      0.80       395\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Creating and fitting a Logistic Regression model\n",
    "model = LogisticRegression(random_state=42)\n",
    "model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "#Predicting on my test data\n",
    "y_pred = model.predict(X_test_tfidf)\n",
    "\n",
    "#Evaluating my model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "classification_rep = classification_report(y_test, y_pred)\n",
    "\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Classification Report:\\n\",classification_rep)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MODEL SELECTION: RANDOM FOREST CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Model: RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
      "                       criterion='gini', max_depth=20, max_features='auto',\n",
      "                       max_leaf_nodes=None, max_samples=None,\n",
      "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                       min_samples_leaf=1, min_samples_split=5,\n",
      "                       min_weight_fraction_leaf=0.0, n_estimators=300,\n",
      "                       n_jobs=None, oob_score=False, random_state=42, verbose=0,\n",
      "                       warm_start=False)\n"
     ]
    }
   ],
   "source": [
    "#Using GridSearchCV to find the best hyperparameters for a Random Forest Classifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [None, 10, 20],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "\n",
    "grid_search =GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5, n_jobs=-1)\n",
    "grid_search.fit(X_train_tfidf, y_train)\n",
    "\n",
    "best_model = grid_search.best_estimator_\n",
    "print(\"Best Model:\",best_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Model Accuracy: 0.830379746835443\n",
      "Random Forest Model Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "       False       0.81      0.86      0.83       195\n",
      "        True       0.86      0.80      0.83       200\n",
      "\n",
      "    accuracy                           0.83       395\n",
      "   macro avg       0.83      0.83      0.83       395\n",
      "weighted avg       0.83      0.83      0.83       395\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Predicting on my test data\n",
    "y_pred_rf = best_rf_model.predict(X_test_tfidf_df)\n",
    "\n",
    "# Evaluating my Random Forest model\n",
    "accuracy_rf = accuracy_score(y_test, y_pred_rf)\n",
    "classification_rep_rf = classification_report(y_test, y_pred_rf)\n",
    "\n",
    "print(\"Random Forest Model Accuracy:\", accuracy_rf)\n",
    "print(\"Random Forest Model Classification Report:\\n\", classification_rep_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
